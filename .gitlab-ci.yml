image: node:22

variables:
  PNPM_HOME: "/root/.local/share/pnpm"
  PATH: "$PNPM_HOME:$PATH"
  NODE_ENV: development
  # чтобы jest/ts-jest не падали на ограничениях памяти GitLab Runner-а
  NODE_OPTIONS: "--max-old-space-size=2048"

cache:
  key: "${CI_COMMIT_REF_SLUG}"
  paths:
    - node_modules/
    - .pnpm-store

stages:
  - lint
  - test
  - build
  # - docker   # включи, если нужен пуш образа
  # - deploy   # если будет автодеплой

.before_install: &before_install
  - corepack enable
  - pnpm --version
  - pnpm install --frozen-lockfile --store-dir .pnpm-store

lint:
  stage: lint
  script:
    - *before_install
    - pnpm run lint
  rules:
    - if: $CI_PIPELINE_SOURCE == "push"

test:
  stage: test
  script:
    - *before_install
    - pnpm run test:cov
  artifacts:
    when: always
    paths:
      - coverage/
    expire_in: 7 days

build:
  stage: build
  script:
    - *before_install
    - pnpm run build
  artifacts:
    paths:
      - dist/
      - package.json
      - pnpm-lock.yaml
      - nest-cli.json
      - mikro-orm.config.ts
      - migrations/
    expire_in: 7 days

# ---- Опционально: сборка и публикация Docker-образа в GitLab Container Registry ----
# Требуется настроить Variables:
# - CI_REGISTRY_USER / CI_REGISTRY_PASSWORD (обычно заполняются автоматически)
# - CI_REGISTRY (обычно registry.gitlab.com)
# И включить сервис docker:dind (Runner должен позволять privileged).
# docker-build:
#   stage: docker
#   image: docker:25
#   services:
#     - name: docker:25-dind
#       command: ["--tls=false"]
#   variables:
#     DOCKER_DRIVER: overlay2
#     DOCKER_TLS_CERTDIR: ""
#   before_script:
#     - echo "$CI_REGISTRY_PASSWORD" | docker login -u "$CI_REGISTRY_USER" --password-stdin $CI_REGISTRY
#   script:
#     - docker build -t $CI_REGISTRY_IMAGE:$CI_COMMIT_SHORT_SHA .
#     - docker push $CI_REGISTRY_IMAGE:$CI_COMMIT_SHORT_SHA
#     - docker tag $CI_REGISTRY_IMAGE:$CI_COMMIT_SHORT_SHA $CI_REGISTRY_IMAGE:latest
#     - docker push $CI_REGISTRY_IMAGE:latest
#   needs: ["build"]
#   rules:
#     - if: $CI_COMMIT_BRANCH

# ---- Опционально: простой deploy-шаг (заглушка) ----
# deploy:
#   stage: deploy
#   script:
#     - echo "Deploying…"
#   environment:
#     name: production
#   rules:
#     - if: $CI_COMMIT_BRANCH == "master" || $CI_COMMIT_BRANCH == "main"
